{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Group inference and reporting of neuroimaging studies require that individual's features are spatially aligned into a common frame where their location can be called standard (Brett et al., 2002). To that end, a multiplicity of brain templates with anatomical annotations (i.e. atlases) have been published (Dickie et al., 2017). However, a centralized resource that allows programmatic access to templates is lacking. TemplateFlow is a modular, version-controlled resource that allows researchers to use templates \"off-the-shelf\" and share new ones.</p> The 7 templates highlighted in blue are constituents of the Montreal Neurological Institute (MNI) portfolio. The Waxholm space (<code>WHS</code>) and <code>Fischer344</code> templates provide references for rat neuroimaging. <code>fsaverage</code> and <code>fsLR</code> are surface templates; the remaining templates are volumetric. Each template is distributed with atlas labels, segmentations, and metadata files. The 15 templates displayed here are only a small fraction of those created as stereotaxic references for the neuroimaging community. <p>Please head over to our TemplateFlow Archive browser.</p>"},{"location":"#birds-view-over-templateflow","title":"Bird's view over TemplateFlow","text":"TemplateFlow implements the FAIR guiding principles. The TemplateFlow Archive can be accessed at a \u201clow\u201d level with DataLad, or at a \u201chigh\u201d level with a Python client. New resources can be added through the TemplateFlow Manager Command Line Interface, which initiates a peer-review process before acceptance in the Archive."},{"location":"browse/","title":"The TemplateFlow Archive online browser","text":"<p>Template data are archived using a BIDS-like directory structure, with top-level directories for each template. Each directory contains image files, annotations, and metadata for that template. Following BIDS specifications, volumetric data are stored in NIfTI format and surface data with the GIFTI2 format.</p>"},{"location":"contributing/guidelines/","title":"Guidelines","text":"<p>Welcome to the TemplateFlow project! We're excited you're here and want to contribute.</p> <p>Imposter's syndrome disclaimer</p> <p>Imposter's syndrome disclaimer1: We want your help. No, really.</p> <p>There may be a little voice inside your head that is telling you that you're not ready to be an open-source contributor; that your skills aren't nearly good enough to contribute. What could you possibly offer a project like this one?</p> <p>We assure you - the little voice in your head is wrong. If you can write code at all, you can contribute code to open-source. Contributing to open-source projects is a fantastic way to advance one's coding skills. Writing perfect code isn't the measure of a good developer (that would disqualify all of us!); it's trying to create something, making mistakes, and learning from those mistakes. That's how we all improve, and we are happy to help others learn.</p> <p>Being an open-source contributor doesn't just mean writing code, either. You can help out by writing documentation, tests, or even giving feedback about the project (and yes - that includes giving feedback about the contribution process). Some of these contributions may be the most valuable to the project as a whole, because you're coming to the project with fresh eyes, so you can see the errors and assumptions that seasoned contributors have glossed over.</p>"},{"location":"contributing/guidelines/#joining-the-conversation","title":"Joining the conversation","text":"<p>TemplateFlow is maintained by a growing group of enthusiastic developers\u2014 and we're excited to have you join! Most of our discussions will take place on open issues.</p> <p>We also encourage users to report any difficulties they encounter on NeuroStars, a community platform for discussing neuroimaging.</p> <p>We actively monitor both spaces and look forward to hearing from you in either venue!</p>"},{"location":"contributing/guidelines/#before-you-start","title":"Before you start","text":""},{"location":"contributing/guidelines/#are-you-allowed-to-share-the-template","title":"Are you allowed to share the template?","text":"<p>Templates have a license to specify the terms under which they can be shared. TemplateFlow can only include templates that allow for redistribution. It is okay if the template requires attribution, but you need to make sure to add the attribution information into the <code>template_description.json</code> file.</p>"},{"location":"contributing/guidelines/#what-type-of-contribution-are-you-making","title":"What type of contribution are you making?","text":"<p>There are three different types of contributions you can make to TemplateFlow.</p> <p>A new template space :   This contribution involves adding a new space that does not     currently exist. Let us say you have made a new pediatric space that     you transform your images to; this would be a new template space.     All the different MNI templates are each considered their own     template space. Currently this requires writing permissions to the     TemplateFlow repo. For now, if you do not have access open up an     issue in the templateflow repo to say which template spaces should     be added.</p> <p>NIfTI images within an existing template space :   This contribution involves adding to a template space that currently     exists. An example of this would be adding a NIfTI file that is an     atlas. You need to know which template space your atlas is in (Note:     there are multiple MNI spaces).</p> <p>Meta information :   This contribution involves additional information about existing     templates. These will generally be in <code>.json</code> or <code>.tsv</code> files. There     are also transform files which help translate between templates.</p> <p>Python client :   You are implementing a new feature or fixing a bug of the Python client.     Or you are improving its documentation. Please refer to the     Python client area.</p> <p>There are tutorials for each of these different types of contributions.</p>"},{"location":"contributing/guidelines/#template-style-guide","title":"Template Style Guide","text":"<p>Please check the documentation about how templates are structure and appropriate names for their files.</p>"},{"location":"contributing/guidelines/#recognizing-contributions","title":"Recognizing contributions","text":"<p>We welcome and recognize all contributions regardless their size, content or scope: from documentation to testing and code development.</p>"},{"location":"contributing/guidelines/#thank-you","title":"Thank you!","text":"<p>You're awesome. </p> <p></p> <p>\u2014 Based on contributing guidelines from the STEMMRoleModels project.</p> <ol> <li> <p>The imposter syndrome disclaimer was originally written by Adrienne Lowe for a PyCon talk, and was adapted based on its use in the README file for the MetPy project.\u00a0\u21a9</p> </li> </ol>"},{"location":"contributing/naming/","title":"Naming Conventions","text":"<p>The TemplateFlow Archive is organized in a BIDS-like structure. However, it deviates from the standard at times (e.g., the <code>tpl</code> key replaces <code>sub</code>). Here we outline the most common names that are found in TemplateFlow.</p> <p>Common key names using in TemplateFlow:</p> Key Entity Description <code>tpl</code> Template identifier A unique name of the template, matching those of BIDS. <code>res</code> Resolution See <code>template_description.json</code> within each template for more information about what the index specifies. <code>atlas</code> Atlas Name of an atlas. <code>desc</code> Description Additional information about the file to differentiate it from other files. <p>TemplateFlow uses all the valid suffices of BIDS, but the most commonly found in the Archive are:</p> Suffix Description <code>dseg</code> discrete segmentation <code>pseg</code> probability segmentation <code>mask</code> binary mask <code>xfm</code> transform file <code>T2w</code> T2 weighted image <code>T1w</code> T1 weighted image <p>Common file-formats used in TemplateFlow:</p> Extension Description <code>.nii.gz</code> Image <code>.tsv</code> Tabular information <code>.json</code> Meta-information <code>.h5</code> Transform file <p>Thus a template with the following name: <code>tpl-test_res-high_atlas-myatlas_desc-200nodes_dseg.nii.gz</code> would be a NIfTI image containing the discrete segmentation of <code>myatlas</code> that contains <code>200nodes</code>. The template identifier is <code>test</code>. The resolution information will be found in the <code>template_description.json</code> file under the entry <code>high</code>.</p>"},{"location":"contributing/submission/","title":"Submitting a new template","text":"<p>Who is this tutorial for?</p> <p>First, this is intended for those wishing to add templates to TemplateFlow. Second, this is for people who want to add a template directory that does not already exists. TemplateFlow consists of multiple templates sorted by the space the template is in. This tutorial tells you how to add a new template space.</p> <p>If you want to fix, improve or extend an existing template please refer to the Updating templates documentation (work in progress).</p> <p>This tutorial assumes you have read and understood the contributing guidelines.</p>"},{"location":"contributing/submission/#overview-submission-pipeline-and-the-templateflow-manager-tool","title":"Overview: Submission pipeline and the TemplateFlow Manager tool","text":"To contribute a new template to TemplateFlow, members of the community first organise template resources to conform to the BIDS-like TemplateFlow structure. Next, the TemplateFlow Manager tool (<code>tfmgr</code>) synchronises the resources to OSF cloud storage and opens a new pull request proposing the addition of the new template. A subsequent peer-review process ensures that all data are conformant with the TemplateFlow standard. Finally, TemplateFlow curators conclude the peer-review process with the merge of the pull request, thereby adding the template into the TemplateFlow Archive."},{"location":"contributing/submission/#step-1-organize-your-template-tree","title":"Step 1: Organize your template tree","text":"<p>TemplateFlow follows a BIDS-like structure, please make sure your tree is formatted following the naming conventions.</p> <p>Examples</p> <p>Please check the formatting of existing templates in the Archive browser</p>"},{"location":"contributing/submission/#step-2-create-a-new-public-project-at-osfio","title":"Step 2: Create a new public project at osf.io","text":"<p>Head to your OSF home and create a new project. Make sure you make your project public and write down the project identifier from the URL.</p> <p></p>"},{"location":"contributing/submission/#step-3-install-the-templateflow-manager-and-tfmgr-add-your-template","title":"Step 3: Install the TemplateFlow Manager and <code>tfmgr add</code> your template","text":"<p>Installing the manager is as easy as:</p> <pre><code>pip install git+https://github.com/templateflow/python-manager@master\n</code></pre> <p>Once the manager is installed, you should be able to print out its version:</p> <pre><code>$ tfmgr --version\nTF Archive manager 20.0.0\n</code></pre> <p>Finally, set up your OSF and GitHub authorization details and call <code>add</code>. It is fundamental to copy here the OSF project ID from step 2.</p> <pre><code>$ export OSF_USERNAME='some@email.com'\n$ export OSF_PASSWORD='****'\n$ export GITHUB_USER='oesteban'\n$ export GITHUB_PASSWORD='****'  # or personal access token\n\n# Assuming the template is at the current directory, under tpl-Name/\n$ tfmgr add tpl-Name --osf-project '&lt;project_id&gt;'\n</code></pre>"},{"location":"contributing/submission/#wrapping-up","title":"Wrapping up","text":"<p>This screencast summarizes the three-step process above:</p>"},{"location":"usage/archive/","title":"TemplateFlow Archive","text":"<p>The TemplateFlow Archive aggregates all the templates for redistribution. The archive uses DataLad to maintain all templates under version control.</p>"},{"location":"usage/archive/#accessing-the-archive-via-the-python-client","title":"Accessing the Archive via the Python client","text":"<p>The recommended way to use TemplateFlow is via the Python Client</p>"},{"location":"usage/archive/#accessing-the-archive-via-datalad","title":"Accessing the Archive via DataLad","text":"<p>First, make sure you have a functional installation of DataLad. The archive has a top-level data structure to maintain all templates. This is the super-dataset, and it is maintained on GitHub. The latest stable super-dataset can be referenced with <code>///templateflow</code>:</p> <pre><code>$ datalad install -r ///templateflow\n</code></pre> <p>The <code>-r</code> switch ensures all available templates are also installed.</p> <p>Once the super-dataset and its siblings are installed, metadata will be already accessible. However, the different imaging data resources (NIfTI, GIFTI and transforms files) have to be pulled down.</p> <p>For example, to download the complete <code>tpl-MNI152NLin2009cAsym</code>:</p> <pre><code>$ cd templateflow\n$ datalad get -r tpl-MNI152NLin2009cAsym\n</code></pre>"},{"location":"usage/archive/#acceptable-data-types","title":"Acceptable data types","text":"<p>The TemplateFlow Archive contains template resources.</p> Common file formats included in the TemplateFlow Archive. Overview of the TemplateFlow Archive metadata specification.  TemplateFlow metadata are formatted as JavaScript Object Notation (JSON) files located at the top of the template's directory. An example <code>template_description.json</code> metadata file is displayed at left (for the pediatric MNI template). In addition to general template metadata, TemplateFlow datasets can contain cohort-level and resolution-level metadata, which are nested within the main metadata dictionary and apply only to subsets of images in the dataset."},{"location":"usage/citing/","title":"Cite TemplateFlow","text":"<p>If you use TemplateFlow in your research, please make sure you include a reference to our paper:</p> <p>Please cite TemplateFlow if you use it in your research!</p> <p>TemplateFlow: a community archive of imaging templates and atlases for improved consistency in neuroimaging R Ciric, R Lorenz, WH Thompson, M Goncalves, E MacNicol, CJ Markiewicz, YO Halchenko, SS Ghosh, KJ Gorgolewski, RA Poldrack, O Esteban bioRxiv 2021.02.10.430678; doi:10.1101/2021.02.10.430678</p>"},{"location":"usage/citing/#make-sure-you-cite-the-original-reference-of-the-particular-templates-you-pull-from-templateflow","title":"Make sure you cite the original reference of the particular templates you pull from TemplateFlow","text":"<p>Original authors of templates must be credited. For that, please find the <code>\"ReferencesAndLinks\"</code> metadata entry in the corresponding <code>template_description.json</code> file. Some templates also have a <code>\"RRID\"</code>, a unique Research Resource ID, which should also be reported within your methods section.</p>"},{"location":"usage/client/","title":"Python Client","text":""},{"location":"usage/client/#about-the-python-client","title":"About the Python client","text":"<p>The Python client provides an easy to use tool to integrate the TemplateFlow Archive into Python code and notebooks. The Python client uses PyBIDS to index and query the TemplateFlow Archive. A practical example of how this operates follows:</p> <pre><code>&gt;&gt;&gt; from templateflow import api as tflow\n&gt;&gt;&gt; tflow.get('MNI152NLin6Asym', desc=None, resolution=1,\n...           suffix='T1w', extension='nii.gz')\nPosixPath('/templateflow_home/tpl-MNI152NLin6Asym/tpl-MNI152NLin6Asym_res-01_T1w.nii.gz')\n</code></pre>"},{"location":"usage/client/#lazy-loading-of-templates","title":"Lazy loading of templates","text":"<p>The client only pulls the template data the first time those are requested. The first time we run the above commands in python, we will see how the client connects to the archive and pulls down a copy. The second time the command is executed, the local copy is found and retrieved without further Internet access.</p> <p>Caution</p> <p>In computing environments isolated from the Internet (a common case on academic high-performance computing), please fetch all the templates you will need from the node where you can access the Internet during installation.</p> <p>TemplateFlow and Singularity Containers</p> <p>Singularity containers are a special case of isolated environment. These containers are usually executed without privileged permissions and on those settings, the default home folder (see below) will be non-writable. Please check fMRIPrep's documentation for further information on how to use TemplateFlow within Singularity.</p>"},{"location":"usage/client/#the-python-client-in-a-nutshell","title":"The Python client in a nutshell","text":"Example usage of the Python client. After importing the API, the user submits a query for the T1-weighted FSL version of the MNI template at 1 mm resolution. The client first filters through the archive, identifies any files that match the query, and finds their counterparts in cloud storage. It then downloads the requested files and returns their paths in the local TemplateFlow installation directory. Future queries for the same resource can be completed without any re-downloading."},{"location":"usage/client/#installation","title":"Installation","text":""},{"location":"usage/client/#before-you-start","title":"Before you start","text":"<p>By default, the local cache of the archive is stored under <code>$HOME/.cache/templateflow</code>. If you need to change the location of the local copy, make sure you set the <code>TEMPLATEFLOW_HOME</code> environment variable:</p> <pre><code>export TEMPLATEFLOW_HOME=/var/local/templateflow\n</code></pre> <p>Please make sure you have read and write permissions on the folder you designate as home.</p>"},{"location":"usage/client/#mode-of-operation","title":"Mode of operation","text":"<p>The client can operate directly with DataLad or just download templates from a mirror of the archive stored on a public S3 bucket. Using the latter option rules out administering the local copy of the archive with DataLad. By default, the environment variable <code>TEMPLATEFLOW_USE_DATALAD</code> will be set to <code>off</code>. In other words, the default mode of operation is direct download. To enable the DataLad-base operation, make sure you set the environment variable:</p> <pre><code>export TEMPLATEFLOW_USE_DATALAD=on\n</code></pre> <p>Valid values for this environment variable to enable DataLad are <code>1</code>, <code>y</code>, <code>on</code>, <code>yes</code>, <code>true</code>.</p>"},{"location":"usage/client/#installing-the-python-package-with-pip","title":"Installing the Python package with Pip","text":"<p>The TemplateFlow Client only works with Python 3.6 or greater.</p> <pre><code>$ python3 -m pip install templateflow\n</code></pre>"},{"location":"usage/client/#checking-the-installation","title":"Checking the installation","text":"<pre><code>$ python -c \"import templateflow as tf; print(tf.__version__)\"\n0.6.0\n</code></pre>"},{"location":"usage/client/#faq","title":"FAQ","text":""},{"location":"usage/client/#custom-study-population-specific-templates","title":"Custom (study / population specific) templates","text":"<p>As Chris noted in this fundamental thread:</p> <p>Custom (volume and surface) templates derived from a particular dataset have been shown to improve overlap between participants. It is also the recommended way to deal with smaller head sizes in developmental populations. Both ANTs and FreeSurfer support building such templates.</p> <p>It is possible to integrate custom templates into TemplateFlow in two steps:</p> <ol> <li>Organize your template accordingly.</li> <li>Copy the custom template tree into the <code>$TEMPLATEFLOW_HOME</code> directory.</li> </ol> <p>Please make sure you include all the necessary files and resolutions that then will be utilized by downstream software.</p>"},{"location":"usage/client/#why-am-i-getting-zero-sized-nifti-files","title":"Why am I getting zero-sized NIfTI files?","text":"<p>(From: templateflow/tpl-MNI152NLin2009cAsym#7)</p> <p>If you just installed TemplateFlow without explicitly setting the DataLad mode of operation on, then it will be using the S3 backend. To allow lazy loading, S3-operated client installations deploy an archive skeleton to the TemplateFlow Home directory. This skeleton contains zero-size files, that are replaced by the appropriate content pulled down from S3 on the first utilization.</p> <p>So, if you just installed the client, and want to open a particular template image with the Mango visualization tool, instead of just doing:</p> <pre><code>$ mango ${TEMPLATEFLOW_HOME:-$HOME/.cache/templateflow}/tpl-MNI152NLin6Asym/tpl-MNI152NLin6Asym_res-01_T1w.nii.gz\n</code></pre> <p>Please make sure you use the client to access the image, for instance:</p> <pre><code>$ mango $( python -c \"from templateflow.api import get; \\\n          print(str(get('MNI152NLin6Asym', resolution=1, suffix='T1w', desc=None, extension='nii.gz')))\" )\n</code></pre> <p>A pretty close behavior will be expected when operating in DataLad mode, although instead of getting zero-sized files, you'll probably get a straight file not found error.</p>"},{"location":"usage/client/#documentation-for-developers","title":"Documentation for developers","text":"<p>The client is thought out to be integrated in higher-level neuroimaging workflows, such as fMRIPrep, MRIQC. Further details about the usage of the tool are found in the documentation.</p>"}]}